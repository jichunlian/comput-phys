#!/bin/bash
#################################################
#             2018-8-6   LianJiChun             #
#################################################
Help(){
cat << !
+==================================================+
| strain脚本能够生成沿单轴方向(a,b,c)以及双轴方向  |
| (ab,ac,bc)任意应力值的POSCAR文件(当前目录需存在  |
| 初始POSCAR文件),具体用法如下:                    |
+--------------------------------------------------+
| strain -h : 查看帮助信息                         |
+--------------------------------------------------+
| strain 参数1 参数2 :                             |
| 其中参数2可指定应力方向(a,b,c,ab,ac,bc)          |
| 参数1可指定应力值,具体有两种工作模式             |
+--------------------------------------------------+
| 模式1) 应力序列模式                              |
| 如: strain -6:2:6 a 其中-6为序列起始值,2为步长   |
| 6为终止值,三者用冒号隔开,若缺省步长,则默认为1    |
| 如: strain -5:5 a , 此外,起始值与终止值,并不     |
| 要求关于零点对称, 如: strain -5:1:10 a           |
+--------------------------------------------------+
| 模式2) 应力散点模式                              |
| 如: strain -2,1,3,2 a 可任意指定多个应力值,并以  |
| 逗号隔开,且顺序是可以随意的,另外,也可以指定单个  |
| 应力值,如: strain 2 a                            |
+--------------------------------------------------+
| 注: 无论哪种模式均支持浮点数应力值               |
| 如: strain -2.5:0.5:2 a    strain 1.1,0.5 a      |
+==================================================+
!
}
#################################################
error(){
case $1 in
0)
    echo 'ERROR : without POSCAR file.' 
;;
1)
    echo 'ERROR : without strain value and drection.'
;;
2)
    echo 'ERROR : without strain direction.'
;;
3)
    echo 'ERROR : strain range more than three value.'
;;
4)
    echo "ERROR : no '$two' direction for choice."
;;
5)
    echo 'ERROR : strain value is non-numeric or zero.'
;;
6)
    echo 'ERROR : strain range without end value.'
;;
7)
    echo 'ERROR : strain range without begin value.'
;;
esac
echo -e "Try 'strain -h' for more information.\n"
exit
}
#################################################
writeposcar(){
initial(){
a[0]=`sed -n '3p' POSCAR|awk '{print $1}'`
a[1]=`sed -n '3p' POSCAR|awk '{print $2}'`
a[2]=`sed -n '3p' POSCAR|awk '{print $3}'`
b[0]=`sed -n '4p' POSCAR|awk '{print $1}'`
b[1]=`sed -n '4p' POSCAR|awk '{print $2}'`
b[2]=`sed -n '4p' POSCAR|awk '{print $3}'`
c[0]=`sed -n '5p' POSCAR|awk '{print $1}'`
c[1]=`sed -n '5p' POSCAR|awk '{print $2}'`
c[2]=`sed -n '5p' POSCAR|awk '{print $3}'`
}
#************************************************
lattace(){
case $1 in
a)
    a[0]=`echo "${a[0]}"|$AWK`
    a[1]=`echo "${a[1]}"|$AWK`
    a[2]=`echo "${a[2]}"|$AWK`
;;
b)
    b[0]=`echo "${b[0]}"|$AWK`
    b[1]=`echo "${b[1]}"|$AWK`
    b[2]=`echo "${b[2]}"|$AWK`
;;
c)
    c[0]=`echo "${c[0]}"|$AWK`
    c[1]=`echo "${c[1]}"|$AWK`
    c[2]=`echo "${c[2]}"|$AWK`
;;
esac
}
#************************************************
cp ../POSCAR ./
initial
AWK="awk {printf(\"%.16f\",\$1*(1+s/100))} s=$i"
case $two in
 a) lattace a ;;
 b) lattace b ;;
 c) lattace c ;;
ab) lattace a ;   lattace b ;;
ac) lattace a ;   lattace c ;;
bc) lattace b ;   lattace c ;;
 *) rm -r ../$dir ; error 4 ;;
esac
#************************************************
sed -i '3,$ d' POSCAR
printf "%23.16f%22.16f%22.16f\n" ${a[*]} >> POSCAR
printf "%23.16f%22.16f%22.16f\n" ${b[*]} >> POSCAR
printf "%23.16f%22.16f%22.16f\n" ${c[*]} >> POSCAR
sed -n '6,$ p' ../POSCAR >> POSCAR
}
#################################################
mode_loop(){
if [ $i == ${i/-/} ]
then
    dir="z$i"
else
    dir="f${i/-/}"
fi
if [ ! -e $dir ]
then
    mkdir $dir
    cd $dir
    writeposcar
    cd ../
else
    echo "pass $dir, directory exist."
fi
}
#################################################
number(){
for i in `seq 1 $#`
do
    char=`echo "$1"|sed "s/[0-9]*//g"|sed "s/[.]//g"|sed "s/-//g"`
    if [ $char ]
    then
	error 5
    fi
    zero=`echo "$1"|awk '{printf("%d\n",$1/$1)}'`
    if [ ! $zero ]
    then
        error 5
    fi
    shift
done
}
#################################################
rmzero(){
for i in `seq 1 $#`
do
    zero=`echo "$1"|awk '{printf("%d\n",$1/$1)}'`
    if [ ! $zero ]
    then
        rm -r "z$1"
	break
    fi
    shift
done
}
#################################################
mode1(){
NF=`echo "$one"|awk -F: '{print NF}'`
case $NF in
2)
    begin=`echo "$one"|awk -F: '{print $1}'`
     step=1
      end=`echo "$one"|awk -F: '{print $2}'`
;;
3)
    begin=`echo "$one"|awk -F: '{print $1}'`
     step=`echo "$one"|awk -F: '{print $2}'`
      end=`echo "$one"|awk -F: '{print $3}'`
;;
*)
    error 3
;;
esac
if [ ! $begin ]
then
    error 7
fi
if [ ! $end ]
then
    error 6
fi
number $begin $step $end 2> /dev/null
for i in `seq $begin $step $end`
do
    mode_loop
done
rmzero `seq $begin $step $end` 2> /dev/null
}
#################################################
mode2(){
NF=`echo "$one"|awk -F, '{print NF}'`
for i in `seq 1 $NF`
do
    strainval[i-1]=`echo "$one"|awk -F, '{print $i}' i=$i`
done
number ${strainval[*]} 2> /dev/null
for i in ${strainval[*]}
do
    mode_loop
done
}
#################################################
modeselect(){
if   [ $one != ${one/:/} ] 2> /dev/null
then
    mode1
elif [ $one != ${one/,/} ] 2> /dev/null
then
    mode2
else
    mode2
fi
}
#################################################
main(){
sed -i 's///g' POSCAR
if [ $one ]
then
    if [ $one == '-h' ]
    then
	Help
    else
	if [ $two ]
	then
	    modeselect
	else
	    error 2
	fi
    fi
else
    error 1
fi
}
#################################################
one=$1;two=$2
if [ -e POSCAR ]
then
    main
elif [ $one == '-h' ] 2> /dev/null
then
    Help
else
    error 0
fi
